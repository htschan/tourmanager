name: Docker Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Configure the API URL based on environment (e.g., staging, production)
  API_BASE_URL: ${{ vars.API_BASE_URL || 'http://localhost:8000' }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Set up metadata variables
      - name: Set up image names
        id: meta
        run: |
          # Set repository prefix if available
          if [ -n "$REPOSITORY" ]; then
            # Ensure repository URL doesn't have trailing slash
            REPOSITORY_URL=$(echo "$REPOSITORY" | sed 's#/$##')
            REPOSITORY_PREFIX="$REPOSITORY_URL/"
          else
            REPOSITORY_PREFIX=""
          fi
          
          # Generate full image names
          echo "backend_image=${REPOSITORY_PREFIX}${BACKEND_IMAGE}" >> $GITHUB_OUTPUT
          echo "frontend_image=${REPOSITORY_PREFIX}${FRONTEND_IMAGE}" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "Debug: Repository prefix: '${REPOSITORY_PREFIX}'"
          echo "Debug: Generated backend image name: ${REPOSITORY_PREFIX}${BACKEND_IMAGE}"
          echo "Debug: Generated frontend image name: ${REPOSITORY_PREFIX}${FRONTEND_IMAGE}"
        env:
          REPOSITORY: ${{ secrets.REPOSITORY }}
          BACKEND_IMAGE: ${{ vars.BACKEND_IMAGE_NAME }}
          FRONTEND_IMAGE: ${{ vars.FRONTEND_IMAGE_NAME }}

      # Extract metadata for versioning
      - name: Extract metadata for Backend Image
        id: metabackend
        uses: docker/metadata-action@v4
        with:
          images: ${{ format('{0}', steps.meta.outputs.backend_image) }}
          flavor: |
            latest=true
          tags: |
            type=sha,format=short

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: ${{ github.event_name == 'push' && contains(github.event.head_commit.message, 'Merge') && github.ref == 'refs/heads/main' }}
          load: true
          tags: ${{ steps.metabackend.outputs.tags }}
          labels: ${{ steps.metabackend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for Frontend Image
        id: metafrontend
        uses: docker/metadata-action@v4
        with:
          images: ${{ format('{0}', steps.meta.outputs.frontend_image) }}
          flavor: |
            latest=true
          tags: |
            type=sha,format=short

      # Build and push Frontend image
      - name: Build Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: ${{ github.event_name == 'push' && contains(github.event.head_commit.message, 'Merge') && github.ref == 'refs/heads/main' }}
          load: true
          tags: ${{ steps.metafrontend.outputs.tags }}
          labels: ${{ steps.metafrontend.outputs.labels }}
          build-args: |
            VITE_API_BASE_URL=${{ env.API_BASE_URL }}
            VITE_BUILD_TIMESTAMP=${{ github.event.repository.updated_at || github.event.head_commit.timestamp }}
            VITE_GIT_SHA=${{ github.sha }}

      # Test the stack
      - name: Test Stack
        timeout-minutes: 15
        run: |
          # Create backend .env file with test configuration
          mkdir -p backend
          cat > backend/.env << EOL
          ENV=test
          DOCKER_ENV=true
          JWT_SECRET_KEY=test-secret-key-for-ci
          DATABASE_PATH=/app/data/tourmanager.db
          PORT=8000
          EOL
          
          # Create data directory and set permissions
          mkdir -p data
          # Ensure directory has correct permissions (readable/writable by all)
          chmod 777 data
          # Create an empty database file
          touch data/tourmanager.db
          # Ensure database file has correct permissions
          chmod 666 data/tourmanager.db
          # Show permissions for debugging
          ls -la data/
          
          # Update image names in docker-compose.yml
          backend_image="${{ steps.meta.outputs.backend_image }}"
          frontend_image="${{ steps.meta.outputs.frontend_image }}"
          
          # Debug image names
          echo "Using backend image: $backend_image"
          echo "Using frontend image: $frontend_image"
          
          # Update docker-compose.yml
          sed -i "s|build: ./backend|image: $backend_image|" docker-compose.yml
          sed -i "s|build: ./frontend|image: $frontend_image|" docker-compose.yml
          
          # Debug: Show docker-compose.yml content
          echo "docker-compose.yml content:"
          cat docker-compose.yml
          
          # Start containers
          docker compose up -d
          
          # Function to check service health
          check_service() {
            local service=$1
            local url=$2
            local max_attempts=$3
            local wait_seconds=$4
            
            echo "Waiting for $service to be ready at $url (max ${max_attempts} attempts, ${wait_seconds}s each)..."
            
            for i in $(seq 1 $max_attempts); do
              echo "Attempt $i/$max_attempts for $service..."
              
              # Show recent logs
              echo "Recent logs for $service:"
              docker compose logs --tail=50 $service
              
              # For backend, also show database permissions
              if [ "$service" = "backend" ]; then
                echo "Database file permissions:"
                docker compose exec backend ls -la /app/data/
              fi
              
              # Try to access the health endpoint
              if curl -s -f "$url" > /dev/null; then
                echo "$service is ready!"
                return 0
              fi
              
              sleep $wait_seconds
            done
            
            echo "$service failed to become ready"
            echo "Final logs for $service:"
            docker compose logs $service
            return 1
          }
          
          # Check backend health (60 attempts, 2 seconds each = 2 minutes total)
          check_service "backend" "http://localhost:8000/health" 60 2 || exit 1
          
          # Check frontend availability (30 attempts, 2 seconds each = 1 minute total)
          check_service "frontend" "http://localhost:3001/" 30 2 || exit 1
          
          # Run frontend tests
          echo "Running frontend tests..."
          cd frontend
          # First install to update package-lock.json with new dependencies
          npm install
          # Then run tests
          npm test
          cd ..
          
          # Show final status
          echo "Container status:"
          docker compose ps
          
          # Cleanup
          docker compose down
